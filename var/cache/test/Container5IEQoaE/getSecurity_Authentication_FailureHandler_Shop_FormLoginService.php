<?php

namespace Container5IEQoaE;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authentication_FailureHandler_Shop_FormLoginService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'security.authentication.failure_handler.shop.form_login' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/AuthenticationFailureHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/CustomAuthenticationFailureHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/DefaultAuthenticationFailureHandler.php';
        include_once \dirname(__DIR__, 4).'/src/Sylius/Bundle/UserBundle/Authentication/AuthenticationFailureHandler.php';

        $a = ($container->services['http_kernel'] ?? $container->getHttpKernelService());

        if (isset($container->privates['security.authentication.failure_handler.shop.form_login'])) {
            return $container->privates['security.authentication.failure_handler.shop.form_login'];
        }
        $b = ($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService'));

        if (isset($container->privates['security.authentication.failure_handler.shop.form_login'])) {
            return $container->privates['security.authentication.failure_handler.shop.form_login'];
        }

        return $container->privates['security.authentication.failure_handler.shop.form_login'] = new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler(new \Sylius\Bundle\UserBundle\Authentication\AuthenticationFailureHandler($a, $b, [], ($container->privates['monolog.logger.security'] ?? $container->getMonolog_Logger_SecurityService())), ['login_path' => 'sylius_shop_login', 'failure_path' => 'sylius_shop_login', 'failure_forward' => false, 'failure_path_parameter' => '_failure_path']);
    }
}
