<?php

namespace Container5IEQoaE;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_AccessMapService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'security.access_map' shared service.
     *
     * @return \Symfony\Component\Security\Http\AccessMap
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/AccessMapInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/AccessMap.php';

        $container->privates['security.access_map'] = $instance = new \Symfony\Component\Security\Http\AccessMap();

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'/_partial', NULL, [], [0 => '127.0.0.1', 1 => '::1']), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'/_partial'), [0 => 'ROLE_NO_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/(?!'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'|api/.*|api$|media/.*)[^/]++/_partial', NULL, [], [0 => '127.0.0.1', 1 => '::1']), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/(?!'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'|api/.*|api$|media/.*)[^/]++/_partial'), [0 => 'ROLE_NO_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'/forgotten-password'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'/login'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/(?!'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'|api/.*|api$|media/.*)[^/]++/login'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/(?!'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'|api/.*|api$|media/.*)[^/]++/register'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/(?!'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'|api/.*|api$|media/.*)[^/]++/verify'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME')), [0 => 'ROLE_ADMINISTRATION_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/(?!'.$container->getEnv('string:resolve:SYLIUS_ADMIN_ROUTING_PATH_NAME').'|api/.*|api$|media/.*)[^/]++/account'), [0 => 'ROLE_USER'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('/api/v2/admin/reset-password-requests'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/v2/admin/.*'), [0 => 'ROLE_API_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('/api/v2/admin/authentication-token'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/v2/shop/account/.*'), [0 => 'ROLE_USER'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('/api/v2/shop/authentication-token'), [0 => 'PUBLIC_ACCESS'], NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/v2/shop/.*'), [0 => 'PUBLIC_ACCESS'], NULL);

        return $instance;
    }
}
