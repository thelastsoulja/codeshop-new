<?php

namespace Proxies\__CG__\Sylius\Component\Core\Model;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Product extends \Sylius\Component\Core\Model\Product implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'variantSelectionMethod', 'productTaxons', 'channels', 'mainTaxon', 'reviews', 'averageRating', 'images', 'id', 'code', 'attributes', 'variants', 'options', 'associations', 'createdAt', 'updatedAt', 'enabled', 'translations', 'translationsCache', 'currentLocale', 'currentTranslation', 'fallbackLocale'];
        }

        return ['__isInitialized__', 'variantSelectionMethod', 'productTaxons', 'channels', 'mainTaxon', 'reviews', 'averageRating', 'images', 'id', 'code', 'attributes', 'variants', 'options', 'associations', 'createdAt', 'updatedAt', 'enabled', 'translations', 'translationsCache', 'currentLocale', 'currentTranslation', 'fallbackLocale'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Product $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getVariantSelectionMethod(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVariantSelectionMethod', []);

        return parent::getVariantSelectionMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function setVariantSelectionMethod(?string $variantSelectionMethod): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVariantSelectionMethod', [$variantSelectionMethod]);

        parent::setVariantSelectionMethod($variantSelectionMethod);
    }

    /**
     * {@inheritDoc}
     */
    public function isVariantSelectionMethodChoice(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVariantSelectionMethodChoice', []);

        return parent::isVariantSelectionMethodChoice();
    }

    /**
     * {@inheritDoc}
     */
    public function getVariantSelectionMethodLabel(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVariantSelectionMethodLabel', []);

        return parent::getVariantSelectionMethodLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function getProductTaxons(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductTaxons', []);

        return parent::getProductTaxons();
    }

    /**
     * {@inheritDoc}
     */
    public function addProductTaxon(\Sylius\Component\Core\Model\ProductTaxonInterface $productTaxon): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProductTaxon', [$productTaxon]);

        parent::addProductTaxon($productTaxon);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProductTaxon(\Sylius\Component\Core\Model\ProductTaxonInterface $productTaxon): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProductTaxon', [$productTaxon]);

        parent::removeProductTaxon($productTaxon);
    }

    /**
     * {@inheritDoc}
     */
    public function hasProductTaxon(\Sylius\Component\Core\Model\ProductTaxonInterface $productTaxon): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasProductTaxon', [$productTaxon]);

        return parent::hasProductTaxon($productTaxon);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxons(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxons', []);

        return parent::getTaxons();
    }

    /**
     * {@inheritDoc}
     */
    public function hasTaxon(\Sylius\Component\Core\Model\TaxonInterface $taxon): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasTaxon', [$taxon]);

        return parent::hasTaxon($taxon);
    }

    /**
     * {@inheritDoc}
     */
    public function getChannels(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannels', []);

        return parent::getChannels();
    }

    /**
     * {@inheritDoc}
     */
    public function addChannel(\Sylius\Component\Channel\Model\ChannelInterface $channel): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChannel', [$channel]);

        parent::addChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChannel(\Sylius\Component\Channel\Model\ChannelInterface $channel): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChannel', [$channel]);

        parent::removeChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function hasChannel(\Sylius\Component\Channel\Model\ChannelInterface $channel): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasChannel', [$channel]);

        return parent::hasChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortDescription', []);

        return parent::getShortDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortDescription(?string $shortDescription): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortDescription', [$shortDescription]);

        parent::setShortDescription($shortDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getMainTaxon(): ?\Sylius\Component\Core\Model\TaxonInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMainTaxon', []);

        return parent::getMainTaxon();
    }

    /**
     * {@inheritDoc}
     */
    public function setMainTaxon(?\Sylius\Component\Core\Model\TaxonInterface $mainTaxon): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMainTaxon', [$mainTaxon]);

        parent::setMainTaxon($mainTaxon);
    }

    /**
     * {@inheritDoc}
     */
    public function getReviews(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReviews', []);

        return parent::getReviews();
    }

    /**
     * {@inheritDoc}
     */
    public function getAcceptedReviews(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcceptedReviews', []);

        return parent::getAcceptedReviews();
    }

    /**
     * {@inheritDoc}
     */
    public function addReview(\Sylius\Component\Review\Model\ReviewInterface $review): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addReview', [$review]);

        parent::addReview($review);
    }

    /**
     * {@inheritDoc}
     */
    public function removeReview(\Sylius\Component\Review\Model\ReviewInterface $review): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeReview', [$review]);

        parent::removeReview($review);
    }

    /**
     * {@inheritDoc}
     */
    public function getAverageRating(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAverageRating', []);

        return parent::getAverageRating();
    }

    /**
     * {@inheritDoc}
     */
    public function setAverageRating(float $averageRating): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAverageRating', [$averageRating]);

        parent::setAverageRating($averageRating);
    }

    /**
     * {@inheritDoc}
     */
    public function getImages(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImages', []);

        return parent::getImages();
    }

    /**
     * {@inheritDoc}
     */
    public function getImagesByType(string $type): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImagesByType', [$type]);

        return parent::getImagesByType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function hasImages(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasImages', []);

        return parent::hasImages();
    }

    /**
     * {@inheritDoc}
     */
    public function hasImage(\Sylius\Component\Core\Model\ImageInterface $image): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasImage', [$image]);

        return parent::hasImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function addImage(\Sylius\Component\Core\Model\ImageInterface $image): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addImage', [$image]);

        parent::addImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function removeImage(\Sylius\Component\Core\Model\ImageInterface $image): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeImage', [$image]);

        parent::removeImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslation(string $locale = NULL): \Sylius\Component\Resource\Model\TranslationInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslation', [$locale]);

        return parent::getTranslation($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode(?string $code): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptor(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptor', []);

        return parent::getDescriptor();
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug(?string $slug): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug]);

        parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(?string $description): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaKeywords(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaKeywords', []);

        return parent::getMetaKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaKeywords(?string $metaKeywords): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaKeywords', [$metaKeywords]);

        parent::setMetaKeywords($metaKeywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaDescription', []);

        return parent::getMetaDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaDescription(?string $metaDescription): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaDescription', [$metaDescription]);

        parent::setMetaDescription($metaDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributesByLocale(string $localeCode, string $fallbackLocaleCode, string $baseLocaleCode = NULL): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributesByLocale', [$localeCode, $fallbackLocaleCode, $baseLocaleCode]);

        return parent::getAttributesByLocale($localeCode, $fallbackLocaleCode, $baseLocaleCode);
    }

    /**
     * {@inheritDoc}
     */
    public function addAttribute(?\Sylius\Component\Attribute\Model\AttributeValueInterface $attribute): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttribute', [$attribute]);

        parent::addAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttribute(?\Sylius\Component\Attribute\Model\AttributeValueInterface $attribute): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttribute', [$attribute]);

        parent::removeAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttribute(\Sylius\Component\Attribute\Model\AttributeValueInterface $attribute): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttribute', [$attribute]);

        return parent::hasAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttributeByCodeAndLocale(string $attributeCode, string $localeCode = NULL): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttributeByCodeAndLocale', [$attributeCode, $localeCode]);

        return parent::hasAttributeByCodeAndLocale($attributeCode, $localeCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeByCodeAndLocale(string $attributeCode, string $localeCode = NULL): ?\Sylius\Component\Attribute\Model\AttributeValueInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeByCodeAndLocale', [$attributeCode, $localeCode]);

        return parent::getAttributeByCodeAndLocale($attributeCode, $localeCode);
    }

    /**
     * {@inheritDoc}
     */
    public function hasVariants(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasVariants', []);

        return parent::hasVariants();
    }

    /**
     * {@inheritDoc}
     */
    public function getVariants(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVariants', []);

        return parent::getVariants();
    }

    /**
     * {@inheritDoc}
     */
    public function addVariant(\Sylius\Component\Product\Model\ProductVariantInterface $variant): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVariant', [$variant]);

        parent::addVariant($variant);
    }

    /**
     * {@inheritDoc}
     */
    public function removeVariant(\Sylius\Component\Product\Model\ProductVariantInterface $variant): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeVariant', [$variant]);

        parent::removeVariant($variant);
    }

    /**
     * {@inheritDoc}
     */
    public function hasVariant(\Sylius\Component\Product\Model\ProductVariantInterface $variant): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasVariant', [$variant]);

        return parent::hasVariant($variant);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabledVariants(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabledVariants', []);

        return parent::getEnabledVariants();
    }

    /**
     * {@inheritDoc}
     */
    public function hasOptions(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOptions', []);

        return parent::hasOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', []);

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function addOption(\Sylius\Component\Product\Model\ProductOptionInterface $option): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOption', [$option]);

        parent::addOption($option);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOption(\Sylius\Component\Product\Model\ProductOptionInterface $option): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOption', [$option]);

        parent::removeOption($option);
    }

    /**
     * {@inheritDoc}
     */
    public function hasOption(\Sylius\Component\Product\Model\ProductOptionInterface $option): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOption', [$option]);

        return parent::hasOption($option);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssociations(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssociations', []);

        return parent::getAssociations();
    }

    /**
     * {@inheritDoc}
     */
    public function addAssociation(\Sylius\Component\Product\Model\ProductAssociationInterface $association): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAssociation', [$association]);

        parent::addAssociation($association);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAssociation(\Sylius\Component\Product\Model\ProductAssociationInterface $association): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAssociation', [$association]);

        parent::removeAssociation($association);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAssociation(\Sylius\Component\Product\Model\ProductAssociationInterface $association): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAssociation', [$association]);

        return parent::hasAssociation($association);
    }

    /**
     * {@inheritDoc}
     */
    public function isSimple(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSimple', []);

        return parent::isSimple();
    }

    /**
     * {@inheritDoc}
     */
    public function isConfigurable(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isConfigurable', []);

        return parent::isConfigurable();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(?\DateTimeInterface $createdAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(?\DateTimeInterface $updatedAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', []);

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled(?bool $enabled): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function enable(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'enable', []);

        parent::enable();
    }

    /**
     * {@inheritDoc}
     */
    public function disable(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'disable', []);

        parent::disable();
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslations(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslations', []);

        return parent::getTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function hasTranslation(\Sylius\Component\Resource\Model\TranslationInterface $translation): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasTranslation', [$translation]);

        return parent::hasTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function addTranslation(\Sylius\Component\Resource\Model\TranslationInterface $translation): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTranslation', [$translation]);

        parent::addTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTranslation(\Sylius\Component\Resource\Model\TranslationInterface $translation): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTranslation', [$translation]);

        parent::removeTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentLocale(string $currentLocale): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentLocale', [$currentLocale]);

        parent::setCurrentLocale($currentLocale);
    }

    /**
     * {@inheritDoc}
     */
    public function setFallbackLocale(string $fallbackLocale): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFallbackLocale', [$fallbackLocale]);

        parent::setFallbackLocale($fallbackLocale);
    }

}
