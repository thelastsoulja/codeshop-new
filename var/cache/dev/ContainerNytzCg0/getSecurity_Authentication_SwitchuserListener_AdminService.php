<?php

namespace ContainerNytzCg0;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authentication_SwitchuserListener_AdminService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.authentication.switchuser_listener.admin' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\SwitchUserListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/SwitchUserListener.php';

        $a = ($container->privates['debug.security.access.decision_manager'] ?? $container->getDebug_Security_Access_DecisionManagerService());

        if (isset($container->privates['security.authentication.switchuser_listener.admin'])) {
            return $container->privates['security.authentication.switchuser_listener.admin'];
        }
        $b = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->privates['security.authentication.switchuser_listener.admin'])) {
            return $container->privates['security.authentication.switchuser_listener.admin'];
        }

        return $container->privates['security.authentication.switchuser_listener.admin'] = new \Symfony\Component\Security\Http\Firewall\SwitchUserListener(($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService()), ($container->privates['sylius.admin_user_provider.email_or_name_based'] ?? $container->load('getSylius_AdminUserProvider_EmailOrNameBasedService')), ($container->privates['SyliusLabs\\Polyfill\\Symfony\\Security\\Core\\User\\UserChecker'] ?? $container->load('getUserCheckerService')), 'admin', $a, ($container->privates['monolog.logger.security'] ?? $container->getMonolog_Logger_SecurityService()), '_switch_user', 'ROLE_ALLOWED_TO_SWITCH', $b, false);
    }
}
